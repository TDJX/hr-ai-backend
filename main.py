import logging
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager
from app.core.session_middleware import SessionMiddleware
from app.routers import vacancy_router, resume_router
from app.routers.session_router import router as session_router
from app.routers.interview_router import router as interview_router
from app.routers.admin_router import router as admin_router
from app.services.agent_manager import agent_manager

logger = logging.getLogger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üöÄ Starting HR AI Backend...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º AI Agent –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    try:
        agent_success = await agent_manager.start_agent_process()
        if agent_success:
            logger.info("‚úÖ AI Agent started successfully")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–ª–±—ç–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–≥–µ–Ω—Ç–∞
            agent_manager.set_callbacks(
                transcript_callback=handle_transcript,
                question_callback=handle_question,
                status_callback=handle_agent_status
            )
        else:
            logger.error("‚ùå Failed to start AI Agent")
    except Exception as e:
        logger.error(f"‚ùå Error starting AI Agent: {str(e)}")
    
    yield
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º AI Agent –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    logger.info("üõë Shutting down HR AI Backend...")
    try:
        await agent_manager.stop_agent_process()
        logger.info("‚úÖ AI Agent stopped successfully")
    except Exception as e:
        logger.error(f"‚ùå Error stopping AI Agent: {str(e)}")


async def handle_transcript(data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Ä–µ—á–∏ –æ—Ç –∞–≥–µ–Ω—Ç–∞"""
    transcript = data.get("text", "")
    speaker = data.get("speaker", "unknown")
    interview_id = data.get("interview_id")
    
    logger.info(f"üìù Transcript from interview {interview_id} [{speaker}]: {transcript}")
    
    # TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    # TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ WebSocket –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    

async def handle_question(data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç AI –∞–≥–µ–Ω—Ç–∞"""
    question = data.get("text", "")
    section = data.get("section", "unknown")
    interview_id = data.get("interview_id")
    
    logger.info(f"‚ùì AI Question from interview {interview_id} [{section}]: {question}")
    
    # TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    # TODO: –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ—Ä–≤—å—é


async def handle_agent_status(status, data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–∞"""
    logger.info(f"üîÑ Agent status changed to: {status.value}")
    
    # TODO: –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    # TODO: –£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö


app = FastAPI(
    title="HR AI Backend",
    description="Backend API for HR AI system with vacancies and resumes management",
    version="1.0.0",
    lifespan=lifespan
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏ (–ø–æ—Å–ª–µ CORS)
app.add_middleware(SessionMiddleware, cookie_name="session_id")

app.include_router(vacancy_router, prefix="/api/v1")
app.include_router(resume_router, prefix="/api/v1")
app.include_router(session_router, prefix="/api/v1")
app.include_router(interview_router, prefix="/api/v1")
app.include_router(admin_router, prefix="/api/v1")


@app.get("/")
async def root():
    return {"message": "HR AI Backend API", "version": "1.0.0"}


@app.get("/health")
async def health_check():
    return {"status": "healthy"}
