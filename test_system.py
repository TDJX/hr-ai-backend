#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HR-AI —Å–∏—Å—Ç–µ–º—ã –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
"""

import asyncio
import sys
import os
import requests
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.append(str(Path(__file__).parent))

async def test_database_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
    print("Testing database connection...")
    
    try:
        from app.core.database import get_db
        from app.models.resume import Resume
        from sqlalchemy import select
        
        # –ü–æ–ª—É—á–∞–µ–º async —Å–µ—Å—Å–∏—é
        async for db in get_db():
            # –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
            result = await db.execute(select(Resume).limit(1))
            resumes = result.scalars().all()
            
            print("OK Database: connection successful")
            print(f"Found resumes in database: {len(resumes)}")
            return True
            
    except Exception as e:
        print(f"FAIL Database: connection error - {str(e)}")
        return False


async def test_rag_system():
    """–¢–µ—Å—Ç RAG —Å–∏—Å—Ç–µ–º—ã (–ø–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—é–º–µ)"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º RAG —Å–∏—Å—Ç–µ–º—É...")
    
    try:
        from rag.registry import registry
        from rag.llm.model import ResumeParser
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
        chat_model = registry.get_chat_model()
        embeddings_model = registry.get_embeddings_model()
        
        print("‚úÖ RAG —Å–∏—Å—Ç–µ–º–∞: –º–æ–¥–µ–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä —Ä–µ–∑—é–º–µ
        parser = ResumeParser(chat_model)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ
        test_resume_text = """
        –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤
        Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫
        –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: 3 –≥–æ–¥–∞
        –ù–∞–≤—ã–∫–∏: Python, Django, PostgreSQL, Docker
        –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: –ú–ì–£, —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –í–ú–ö
        """
        
        parsed_resume = parser.parse_resume_text(test_resume_text)
        
        print("‚úÖ RAG —Å–∏—Å—Ç–µ–º–∞: –ø–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—é–º–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"üìã –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {parsed_resume}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå RAG —Å–∏—Å—Ç–µ–º–∞: –æ—à–∏–±–∫–∞ - {str(e)}")
        return False


def test_redis_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis...")
    
    try:
        import redis
        from rag.settings import settings
        
        r = redis.Redis(
            host=settings.redis_cache_url,
            port=settings.redis_cache_port,
            db=settings.redis_cache_db
        )
        
        # –ü—Ä–æ–±—É–µ–º ping
        r.ping()
        
        print("‚úÖ Redis: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå Redis: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - {str(e)}")
        print("üí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ Redis –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: docker run -d -p 6379:6379 redis:alpine")
        return False


async def test_celery_tasks():
    """–¢–µ—Å—Ç Celery –∑–∞–¥–∞—á"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º Celery –∑–∞–¥–∞—á–∏...")
    
    try:
        from celery_worker.tasks import parse_resume_task
        
        print("‚úÖ Celery: –∑–∞–¥–∞—á–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è")
        print("üí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: celery -A celery_worker.celery_app worker --loglevel=info")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Celery: –æ—à–∏–±–∫–∞ - {str(e)}")
        return False


async def test_interview_service():
    """–¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ –∏–Ω—Ç–µ—Ä–≤—å—é (–±–µ–∑ LiveKit)"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –∏–Ω—Ç–µ—Ä–≤—å—é...")
    
    try:
        from app.services.interview_service import InterviewRoomService
        from app.core.database import get_db
        
        async for db in get_db():
            service = InterviewRoomService(db)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–æ–∫–µ–Ω–∞ (–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–∂–µ –±–µ–∑ LiveKit —Å–µ—Ä–≤–µ—Ä–∞)
            try:
                token = service.generate_access_token("test_room", "test_user")
                print("‚úÖ Interview Service: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                print(f"üé´ –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (–¥–ª–∏–Ω–∞: {len(token)})")
            except Exception as e:
                print(f"‚ö†Ô∏è  Interview Service: –æ—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞ - {str(e)}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º fallback –ø–ª–∞–Ω –∏–Ω—Ç–µ—Ä–≤—å—é
            fallback_plan = service._get_fallback_interview_plan()
            print("‚úÖ Interview Service: fallback –ø–ª–∞–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–ª–∞–Ω–∞: {list(fallback_plan.keys())}")
            
            return True
            
    except Exception as e:
        print(f"‚ùå Interview Service: –æ—à–∏–±–∫–∞ - {str(e)}")
        return False


def test_ai_agent_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ AI –∞–≥–µ–Ω—Ç–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º AI –∞–≥–µ–Ω—Ç–∞...")
    
    try:
        from ai_interviewer_agent import InterviewAgent
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞–Ω –∏–Ω—Ç–µ—Ä–≤—å—é
        test_plan = {
            "interview_structure": {
                "duration_minutes": 15,
                "greeting": "–ü—Ä–∏–≤–µ—Ç! –¢–µ—Å—Ç –∏–Ω—Ç–µ—Ä–≤—å—é",
                "sections": [
                    {
                        "name": "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ",
                        "duration_minutes": 5,
                        "questions": ["–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ"]
                    },
                    {
                        "name": "–û–ø—ã—Ç",
                        "duration_minutes": 10,
                        "questions": ["–ö–∞–∫–æ–π —É —Ç–µ–±—è –æ–ø—ã—Ç?"]
                    }
                ]
            },
            "candidate_info": {
                "name": "–¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç",
                "skills": ["Python"],
                "total_years": 2
            }
        }
        
        agent = InterviewAgent(test_plan)
        
        print("‚úÖ AI Agent: –∏–º–ø–æ—Ä—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç")
        print(f"üìä –°–µ–∫—Ü–∏–π –≤ –ø–ª–∞–Ω–µ: {len(agent.sections)}")
        print(f"üéØ –¢–µ–∫—É—â–∞—è —Å–µ–∫—Ü–∏—è: {agent.get_current_section().get('name')}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        instructions = agent.get_system_instructions()
        print(f"üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã (–¥–ª–∏–Ω–∞: {len(instructions)})")
        
        return True
        
    except Exception as e:
        print(f"‚ùå AI Agent: –æ—à–∏–±–∫–∞ - {str(e)}")
        return False


def check_external_services():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Milvus
    try:
        from rag.settings import settings
        response = requests.get(f"{settings.milvus_uri}/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Milvus: —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("‚ö†Ô∏è  Milvus: —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception:
        print("‚ùå Milvus: —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º LiveKit (–µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω)
    try:
        # LiveKit health check –æ–±—ã—á–Ω–æ –Ω–∞ HTTP –ø–æ—Ä—Ç—É
        livekit_http_url = settings.livekit_url.replace("ws://", "http://").replace(":7880", ":7880")
        response = requests.get(livekit_http_url, timeout=2)
        print("‚úÖ LiveKit: —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    except Exception:
        print("‚ùå LiveKit: —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        print("üí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ LiveKit –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Docker: docker run --rm -p 7880:7880 -p 7881:7881 livekit/livekit-server --dev")


async def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("=== HR-AI System Testing ===")
    print("=" * 50)
    
    tests = [
        ("Database", test_database_connection),
        ("RAG System", test_rag_system),
        ("Redis", lambda: test_redis_connection()),
        ("Celery", test_celery_tasks),
        ("Interview Service", test_interview_service),
        ("AI Agent", lambda: test_ai_agent_import()),
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        try:
            if asyncio.iscoroutinefunction(test_func):
                result = await test_func()
            else:
                result = test_func()
            results[test_name] = result
        except Exception as e:
            print(f"‚ùå {test_name}: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - {str(e)}")
            results[test_name] = False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã
    check_external_services()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 50)
    
    passed = sum(1 for r in results.values() if r)
    total = len(results)
    
    for test_name, result in results.items():
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{test_name:20} {status}")
    
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é!")
        print_next_steps()
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        print_troubleshooting()


def print_next_steps():
    """–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ FastAPI —Å–µ—Ä–≤–µ—Ä: uvicorn app.main:app --reload")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Celery worker: celery -A celery_worker.celery_app worker --loglevel=info")
    print("3. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Ä–µ–∑—é–º–µ —á–µ—Ä–µ–∑ /resume/upload")
    print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–ª–∞–Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    print("5. –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ—Ç—Ä–µ–±—É—é—Ç—Å—è:")
    print("   - API –∫–ª—é—á–∏ Deepgram/Cartesia")
    print("   - LiveKit —Å–µ—Ä–≤–µ—Ä")


def print_troubleshooting():
    """–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π"""
    print("\nüîß –£–°–¢–†–ê–ù–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú:")
    print("‚Ä¢ Redis –Ω–µ –∑–∞–ø—É—â–µ–Ω: docker run -d -p 6379:6379 redis:alpine")
    print("‚Ä¢ Milvus –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MILVUS_URI")  
    print("‚Ä¢ RAG –æ—à–∏–±–∫–∏: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ OPENAI_API_KEY")
    print("‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ DATABASE_URL –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ alembic upgrade head")


if __name__ == "__main__":
    asyncio.run(run_all_tests())